#!/bin/sh

: '
Author: Shiva
Date: 05-17-24
Time: 07:46 AM

Description:
usage: stream <command>
commands: start -> stars the streaming setup
          end -> will stop the streaming setup
'

# Define the color using the 256-color palette
ROSEPINE_SUBTLE="\033[38;5;103m"
ROSEPINE_LOVE="\033[38;5;203m"
ROSEPINE_PINE="\033[38;5;23m"
ROSEPINE_GOLD="\033[38;5;216m"
ROSEPINE_FOAM="\033[38;5;117m"
BOLD_TEXT="\033[1m"
RESET="\033[0m"

# :: Make sure we receive the correct command ::
# - No command is given
if [[ -z $1 ]]; then
  echo -e "${BOLD_TEXT}${ROSEPINE_LOVE}Must give a command${RESET}"
  exit 1
fi
# - Too many commands are given
if [[ $# -ne 1 ]]; then
  echo -e "${BOLD_TEXT}${ROSEPINE_LOVE}Must give only 1 command${RESET}"
  exit 1
fi
# - Not a valid command
if [[ $1 != "start" && $1 != "end" ]]; then
  echo -e "${BOLD_TEXT}${ROSEPINE_LOVE}'$1' is not a valid command${RESET}"
  exit 1
fi

# :: Run OBS ::
function run_obs(){
  if [[ -n "$(pgrep obs)" ]]; then # check for obs process
    echo "OBS is already running"
  else
    output=$(hyprctl dispatch exec obs) # start obs using hyprland
    sleep 1   # let OBS open

    # get the window-id of 
	  obs_window_id=$(hyprctl clients | grep -E '^Window' | grep "OBS" | awk '{print $2}')
    # echo "OBS Pid: ${obs_window_id}"
    # Move the OBS window to side monitor workspace
    hyprctl dispatch movetoworkspace "10,address:0x${obs_window_id}"

    if [[ $output == "ok" ]]; then
      if [[ -n "$(pgrep obs)" ]]; then # check for obs process
        echo "✅ OBS Started"
      else
        echo -e "${BOLD_TEXT}${ROSEPINE_LOVE}Couldn't start OBS. Make sure to have OBS installed${RESET}"
      fi
    else
      echo "$output"
    fi
  fi
}

function update_hyprland(){
  # turn off borders
  hyprctl keyword general:border_size 2
  # activate the twitch-workspace
  hyprctl dispatch workspace 6
  # remove gaps
	hyprctl keyword general:gaps_in 0
	hyprctl keyword general:gaps_out 0
  # turn off shadow
	hyprctl keyword decoration:drop_shadow false
  # add reserved area to view only 1920x1080 tiling area
	hyprctl keyword monitor DP-1,addreserved,1026,12,640,1280
	# hyprctl keyword monitor DP-1,addreserved,1026,12,645,1285

  echo "✅ Hyprland Updated"
}

function open_kitty_with_stream_session() {
  SESSION_NAME="stream"

  # Check if the tmux session already exists
  tmux has-session -t $SESSION_NAME 2>/dev/null

  if [ $? != 0 ]; then
    # If the session does not exist, create it
    echo "Creating new tmux session: $SESSION_NAME"
    tmux new-session -d -s $SESSION_NAME
  fi

  # Open Kitty terminal and attach to the tmux session
  hyprctl dispatch exec "kitty tmux attach-session -t $SESSION_NAME" > /dev/null 2>&1
  echo "✅ Kitty @tmux-stream-session Opened"
}

function open_chat(){
  echo "✅ Chat Is Opened"
}

function open_chat() {
  # browser="Brave"
  browser="Chrome"
	before=$(hyprctl clients | grep -E '^Window' | grep ${browser} | awk '{print $2}')
  sorted_before=$(echo "$before" | sort) # Sort the process lists
	# echo "BEFORE-Brave Pid's\n$before"

  hyprctl dispatch exec "google-chrome-stable --new-window https://dashboard.twitch.tv/u/simplecolon/stream-manager" > /dev/null
	sleep 1 # let it open
  echo "✅ Chrome Twitch-Chat window is opened"

	after=$(hyprctl clients | grep -E '^Window' | grep ${browser} | awk '{print $2}')
  sorted_after=$(echo "$after" | sort) # Sort the process lists
	# echo "AFTER-Brave Pid's\n$after"

	chat_window_pid=$(comm -13 <(echo "$sorted_before") <(echo "$sorted_after"))
	# echo "New Brave Pid's\n$chat_window_pid"

  # if new brave windows is created, make that float
  if [[ -n "$chat_window_pid" ]]; then
    hyprctl dispatch movetoworkspace "10,address:0x$chat_window_pid"

    # echo "Chat window: $chat_window_pid"
    # hyprctl dispatch togglefloating "address:0x$chat_window_pid" > /dev/null
    # hyprctl dispatch resizewindowpixel "exact 1125 $((2160/2)),address:0x$chat_window_pid" > /dev/null
    # hyprctl dispatch movewindowpixel "exact $((3840-1920-640)) 0,address:0x$chat_window_pid" > /dev/null
    # hyprctl dispatch pin "address:0x$chat_window_pid" > /dev/null
  fi
  echo "✅ Twitch-Chat: Float, Move, Resize, Pin"
}

function open_browser(){
  browser="Brave"
  # browser="Chrome"
	before=$(hyprctl clients | grep -E '^Window' | grep ${browser} | awk '{print $2}')
  sorted_before=$(echo "$before" | sort) # Sort the process lists
	# echo "BEFORE-Brave Pid's\n$before"

  hyprctl dispatch exec "brave" > /dev/null
	sleep 1 # let it open
  echo "✅ New ${browser} window is opened"

	after=$(hyprctl clients | grep -E '^Window' | grep ${browser} | awk '{print $2}')
  sorted_after=$(echo "$after" | sort) # Sort the process lists
	# echo "AFTER-Brave Pid's\n$after"

	browser_window_pid=$(comm -13 <(echo "$sorted_before") <(echo "$sorted_after"))
	# echo "New Brave Pid's\n$browser_window_pid"

  # if new brave windows is created, make that float
  if [[ -n "$browser_window_pid" ]]; then
    # echo "Browser window: $browser_window_pid"
    hyprctl dispatch togglefloating "address:0x$browser_window_pid" > /dev/null
    hyprctl dispatch resizewindowpixel "exact 1125 $((2160-12-1080-70)),address:0x$browser_window_pid" > /dev/null
    hyprctl dispatch movewindowpixel "exact $((1440 + 8)) 50,address:0x$browser_window_pid" > /dev/null
    # hyprctl dispatch movewindowpixel "exact $((3840-1920-640)) 0,address:0x$browser_window_pid" > /dev/null
    hyprctl dispatch pin "address:0x$browser_window_pid" > /dev/null
  fi
  echo "✅ ${browser}-Window: Float, Move, Resize, Pin"
}



# Start Stream
if [[ $1 == "start" ]]; then
  echo -e "${ROSEPINE_GOLD}Starting Stream${RESET}"
  run_obs
  update_hyprland
  open_kitty_with_stream_session
  open_chat
  open_browser
  exit 1
fi

# End Stream
if [[ $1 == "end" ]]; then
  echo -e "${ROSEPINE_PINE}Resetting Hyprland${RESET}"
  hyprctl reload
  sleep 1
  echo "✅ Hyprland Updated"
  exit 1
fi


